#cloud-config
package_update: true
package_upgrade: true

apt:
  sources:
    docker.list:
      source: "deb [arch=amd64] https://download.docker.com/linux/ubuntu $RELEASE stable"
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
      keyserver: hkp://keyserver.ubuntu.com:80
    azure-cli.list:
      source: "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $RELEASE main"
      keyid: BC528686B50D79E339D3721CEB3E94ADBE1229CF
      keyserver: hkp://keyserver.ubuntu.com:80

packages:
  - docker-ce
  - docker-ce-cli
  - containerd.io
  - docker-compose
  - azure-cli
  - gnupg2
  - pass

groups:
  - docker

system_info:
  default_user:
    groups: [docker]

write_files:
  - path: /etc/systemd/system/tre-bootstrap.service
    content: |
      [Unit]
      Description=TRE Resource Processor Startup
      After=network-online.target
      Wants=network-online.target

      [Service]
      Type=simple
      ExecStart=/opt/tre/startup.sh
      Restart=on-failure
      TimeoutStartSec=600

      [Install]
      WantedBy=multi-user.target

  - path: /opt/tre/startup.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      LOG_FILE="/var/log/tre-bootstrap.log"
      echo "[startup] Waiting for Managed Identity to become available..." | tee -a $LOG_FILE

      i=1
      while [ $i -le 60 ]; do
        TOKEN=$(curl -s -H Metadata:true \
          "http://169.254.169.254/metadata/identity/oauth2/token?api-version=2021-02-01&resource=https://management.azure.com")

        if echo "$TOKEN" | grep -q 'access_token'; then
          echo "[startup] Identity metadata is ready. Proceeding with az login." | tee -a $LOG_FILE
          break
        else
          echo "[startup] IMDS not ready yet (attempt $i), retrying in 5s..." | tee -a $LOG_FILE
          sleep 5
          i=$((i+1))
        fi
      done

      # Now perform actual login
      az login --identity --client-id "${vmss_msi_id}" >> $LOG_FILE 2>&1

      echo "[startup] Logging into ACR..." | tee -a $LOG_FILE
      az acr login --name ${docker_registry_server} >> $LOG_FILE 2>&1

      echo "[startup] Starting Docker container..." | tee -a $LOG_FILE
      docker run -d -p 8080:8080 \
        -v /var/run/docker.sock:/var/run/docker.sock \
        --restart always --env-file /opt/tre/env \
        --name resource_processor1 \
        --log-driver local \
        ${docker_registry_server}/${resource_processor_vmss_porter_image_repository}:${resource_processor_vmss_porter_image_tag} >> $LOG_FILE 2>&1

  - path: /opt/tre/env
    permissions: "0644"
    content: |
      REGISTRY_SERVER=${docker_registry_server}
      TERRAFORM_STATE_CONTAINER_NAME=${terraform_state_container_name}
      MGMT_RESOURCE_GROUP_NAME=${mgmt_resource_group_name}
      MGMT_STORAGE_ACCOUNT_NAME=${mgmt_storage_account_name}
      SERVICE_BUS_DEPLOYMENT_STATUS_UPDATE_QUEUE=${service_bus_deployment_status_update_queue}
      SERVICE_BUS_RESOURCE_REQUEST_QUEUE=${service_bus_resource_request_queue}
      SERVICE_BUS_FULLY_QUALIFIED_NAMESPACE=${service_bus_namespace}
      VMSS_MSI_ID=${vmss_msi_id}
      AZURE_CLIENT_ID=${vmss_msi_id}
      AZURE_SUBSCRIPTION_ID=${arm_subscription_id}
      ARM_CLIENT_ID=${vmss_msi_id}
      AZURE_TENANT_ID=${arm_tenant_id}
      ARM_USE_MSI=true
      APPLICATIONINSIGHTS_CONNECTION_STRING=${app_insights_connection_string}
      NUMBER_PROCESSES=${resource_processor_number_processes_per_instance}
      KEY_VAULT_NAME=${key_vault_name}
      KEY_VAULT_URL=${key_vault_url}
      ARM_ENVIRONMENT=${arm_environment}
      AZURE_ENVIRONMENT=${azure_environment}
      AAD_AUTHORITY_URL=${aad_authority_url}
      MICROSOFT_GRAPH_FQDN=${microsoft_graph_fqdn}
      OTEL_RESOURCE_ATTRIBUTES=service.name=resource_processor,service.version=${resource_processor_vmss_porter_image_tag}
      OTEL_EXPERIMENTAL_RESOURCE_DETECTORS=azure_vm
      LOGGING_LEVEL=${logging_level}
      ${rp_bundle_values}

  - path: /etc/cron.hourly/docker-prune
    permissions: "0755"
    content: |
      #!/bin/bash
      set -o errexit
      used_percent=$(df / --output=pcent | tail -1 | sed 's/[^0-9]//g')
      echo "Used disk space percent: $${used_percent}"
      if (( used_percent > 75 )); then
        echo "Free space too low, pruning..."
        docker system prune -f
      fi

runcmd:
  - systemctl daemon-reexec
  - systemctl enable tre-bootstrap.service
  - systemctl start tre-bootstrap.service
  - echo "Rebooting to activate new kernel and services..."
  - reboot
